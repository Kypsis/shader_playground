import 'dart:typed_data';
import 'dart:ui';

import 'package:flutter/material.dart';
import 'package:flutter/scheduler.dart';

/// Import file generated by cli
import 'package:shader_playground/space_shader/shader/space_shader_sprv.dart';

class SpaceShaderPage extends StatefulWidget {
  const SpaceShaderPage({super.key});

  @override
  State<SpaceShaderPage> createState() => _SpaceShaderPageState();
}

class _SpaceShaderPageState extends State<SpaceShaderPage> with SingleTickerProviderStateMixin {
  late final Ticker ticker;

  Duration elapsed = Duration.zero;
  double xPosition = 0;
  double yPosition = 0;

  @override
  void initState() {
    super.initState();

    ticker = createTicker((onTick) {
      setState(() {
        elapsed = onTick;
      });
    });

    ticker.start();
  }

  @override
  void dispose() {
    ticker.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return SizedBox(
      height: MediaQuery.of(context).size.height,
      width: MediaQuery.of(context).size.width,
      child: FutureBuilder<FragmentProgram>(
        /// Use the generated loader function here
        future: spaceShaderFragmentProgram(),
        builder: (context, snapshot) {
          if (!snapshot.hasData) {
            /// Shader is loading
            return const Center(
              child: CircularProgressIndicator(),
            );
          }

          /// Shader is ready to use
          return GestureDetector(
            onPanUpdate: (details) {
              setState(() {
                xPosition = details.localPosition.dx;
                yPosition = details.localPosition.dy;
              });
            },
            child: CustomPaint(
              painter: SpaceShaderPainter(
                fragmentProgram: snapshot.data!,
                elapsed: elapsed,
                xPosition: xPosition,
                yPosition: yPosition,
              ),
            ),
          );
        },
      ),
    );
  }
}

/// Customer painter that makes use of the shader
class SpaceShaderPainter extends CustomPainter {
  SpaceShaderPainter({
    required this.fragmentProgram,
    required this.elapsed,
    required this.xPosition,
    required this.yPosition,
  });

  final FragmentProgram fragmentProgram;
  final Duration elapsed;
  final double xPosition;
  final double yPosition;

  @override
  void paint(Canvas canvas, Size size) {
    /// Create paint using a shader
    final paint = Paint()
      ..shader = fragmentProgram.shader(
        /// Specify input parameter (uniforms)
        floatUniforms: Float32List.fromList([
          size.width,
          size.height,
          elapsed.inMilliseconds.toDouble() * 0.001,
          xPosition * 0.1,
          yPosition * 0.1,
        ]),
      );

    /// Draw a rectangle with the shader-paint
    canvas.drawRect(Rect.fromLTWH(0, 0, size.width, size.height), paint);
  }

  @override
  bool shouldRepaint(covariant CustomPainter oldDelegate) {
    if (oldDelegate is SpaceShaderPainter &&
        oldDelegate.fragmentProgram == fragmentProgram &&
        (oldDelegate.elapsed == elapsed || oldDelegate.xPosition == xPosition || oldDelegate.yPosition == yPosition)) {
      /// Do not repaint when painter has same set of properties
      return false;
    }
    return true;
  }
}
