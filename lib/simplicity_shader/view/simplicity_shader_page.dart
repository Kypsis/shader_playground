import 'dart:typed_data';
import 'dart:ui';

import 'package:flutter/material.dart';
import 'package:flutter/scheduler.dart';

/// Import file generated by cli
import 'package:shader_playground/simplicity_shader/shader/simplicity_shader_sprv.dart';

class SimplicityShaderPage extends StatefulWidget {
  const SimplicityShaderPage({super.key});

  @override
  State<SimplicityShaderPage> createState() => _SimplicityShaderPageState();
}

class _SimplicityShaderPageState extends State<SimplicityShaderPage> with SingleTickerProviderStateMixin {
  late final Ticker ticker;

  Duration elapsed = Duration.zero;

  @override
  void initState() {
    super.initState();

    ticker = createTicker((onTick) {
      setState(() {
        elapsed = onTick;
      });
    });

    ticker.start();
  }

  @override
  void dispose() {
    ticker.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return SizedBox(
      height: MediaQuery.of(context).size.height,
      width: MediaQuery.of(context).size.width,
      child: FutureBuilder<FragmentProgram>(
        /// Use the generated loader function here
        future: simplicityShaderFragmentProgram(),
        builder: (context, snapshot) {
          if (!snapshot.hasData) {
            /// Shader is loading
            return const Center(
              child: CircularProgressIndicator(),
            );
          }

          /// Shader is ready to use
          return CustomPaint(
            painter: SimplicityShaderPainter(
              fragmentProgram: snapshot.data!,
              elapsed: elapsed,
            ),
          );
        },
      ),
    );
  }
}

/// Customer painter that makes use of the shader
class SimplicityShaderPainter extends CustomPainter {
  SimplicityShaderPainter({
    required this.fragmentProgram,
    required this.elapsed,
  });

  final FragmentProgram fragmentProgram;
  final Duration elapsed;

  @override
  void paint(Canvas canvas, Size size) {
    /// Create paint using a shader
    final paint = Paint()
      ..shader = fragmentProgram.shader(
        /// Specify input parameter (uniforms)
        floatUniforms: Float32List.fromList([
          size.width,
          size.height,
          elapsed.inMilliseconds.toDouble() * 0.001,
        ]),
      );

    /// Draw a rectangle with the shader-paint
    canvas.drawRect(Rect.fromLTWH(0, 0, size.width, size.height), paint);
  }

  @override
  bool shouldRepaint(covariant CustomPainter oldDelegate) {
    if (oldDelegate is SimplicityShaderPainter &&
        oldDelegate.fragmentProgram == fragmentProgram &&
        oldDelegate.elapsed == elapsed) {
      /// Do not repaint when painter has same set of properties
      return false;
    }
    return true;
  }
}
